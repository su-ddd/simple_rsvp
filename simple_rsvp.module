<?php

/**
 * Implementation of hook_block_info()
 * This module creates one block to display RSVP options
 */

function simple_rsvp_block_info() {
  $blocks['simple_rsvp'] = array(
    'info'  => t('Simple RSVP'),
    'cache' => DRUPAL_NO_CACHE, 
  );
  return $blocks;
}

/**
 * Implementation of hook_block_view().
 * @param string $delta code to identify the block
*/

function simple_rsvp_block_view($delta = '') {

  // set up an empty array which will contain the block contents
  $block = array();

  switch ($delta) {
    case 'simple_rsvp':
      $block_content = '';
      global $user;
      $block['subject'] = t('RSVP');

      // if the user is logged in, we check their registration status
      if ($user->uid > 0) {
        $block_content .= "<p>Hello " . $user->name . "!</p>";
        $rsvp = simple_rsvp_user_rsvp($user->uid);

        if ($rsvp) { $block_content .= "<p>Your current RSVP is: <strong>" . simple_rsvp_option_name($rsvp) . "</strong></p>";
          	$rsvp_form = drupal_get_form('simple_rsvp_rsvp_form');
          	$block_content .= drupal_render($rsvp_form);
        } else {
        	$block_content .= "<p>Whether attending or not, you must RSVP here to be entered into the Town Hall raffle &mdash; even if you already RSVP&rsquo;ed via the calendar invite. Don&rsquo;t miss out. Register now.</p><p>You haven&rsquo;t RSVP&rsquo;ed yet.</p>";
          	$rsvp_form = drupal_get_form('simple_rsvp_rsvp_form');
          	$block_content .= drupal_render($rsvp_form);        }


      }
      // if the user is anonymous, we'll ask them to log in before they can register.
      else {
	    $block_content .= '<p>' . t('Please log in to register.') . '</p>';
        $block_content .= l(
          'Log in',
          variable_get('simple_registration_login_url', 'user/login'),
          array(
            'attributes' => array('class' => array('btn success')),
            'query'      => array(drupal_get_destination())
          )
        );
      }
      $block['content'] = $block_content;
      break; 
  }
  return $block;
}


/**
 * Find the user's current RSVP status
 */

function simple_rsvp_user_rsvp($uid) {
  $rsvp_id = db_query('SELECT oid FROM {simple_rsvp_rsvps} WHERE uid = :uid', array(':uid' => $uid))->fetchField();
  return $rsvp_id;
}

/**
 *  Find the RSVP option's name
 */
function simple_rsvp_option_name($id) {
  $rsvp_name = db_query('SELECT name FROM {simple_rsvp_options} WHERE id = :id', array(':id' => $id))->fetchField();
  return $rsvp_name;
}

/**
 * RSVP Form
 */

function simple_rsvp_rsvp_form($form, $form_state) {
  global $user;
  $rsvp_options = db_query("SELECT id, name FROM {simple_rsvp_options}")->fetchAllKeyed();
  $option_value = simple_rsvp_user_rsvp($user->uid);

  $form['rsvp_options'] = array(
  	'#required' => true,
    '#type' => 'select',
    '#multiple' => false,
    '#options' => $rsvp_options,
    '#default_value' => $option_value,
    '#empty_option' => ' Please select',
  );
  $form['submit'] = array(
    '#attributes' => array('class' => array('btn')),
    '#type' => 'submit',
    '#value' => t('RSVP')
  );
  return $form;
}

function simple_rsvp_rsvp_form_submit($form, &$form_state) {
  global $user;
  simple_rsvp_update_rsvp($user->uid, $form_state['values']['rsvp_options']);
}

function simple_rsvp_update_rsvp($uid, $rsvp_option) {
  $user = user_load($uid);

  // Log the registration
//  watchdog('simple_registration','Registered: %user', array('%user' => $user->name));
  
  // Create or update the user's status
  db_merge('simple_rsvp_rsvps')
    ->key(array('uid' => $uid))
    ->fields(array(
      'oid' => $rsvp_option,
      'created' => REQUEST_TIME,
    ))
    ->execute();
}

/**
* Implements hook_views_api().
*/
function simple_rsvp_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'simple_rsvp') . '/views',
  );
}
